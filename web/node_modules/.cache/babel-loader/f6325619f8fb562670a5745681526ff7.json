{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = readFileAsText;\n/*\r\n * read-file-as-text.js\r\n */\n\nvar INPUT_ENCODING = 'ISO-8859-1';\n/**\r\n * Reads a HTML5 file as text\r\n * @param {File} file\r\n */\n\nfunction readFileAsText(file) {\n  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : INPUT_ENCODING;\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n\n    reader.onload = function () {\n      return resolve(reader.result);\n    };\n\n    reader.onerror = reject;\n    reader.readAsText(file, encoding);\n  });\n}","map":{"version":3,"sources":["D:/ARQUIVOS/DOCUMENTOS/GitHub/GED_AMATUR/web/node_modules/react-drop-zone/dist/read-file-as-text.js"],"names":["Object","defineProperty","exports","value","readFileAsText","INPUT_ENCODING","file","encoding","arguments","length","undefined","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsText"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqBE,cAArB;AAEA;AACA;AACA;;AACA,IAAIC,cAAc,GAAG,YAArB;AACA;AACA;AACA;AACA;;AAEA,SAASD,cAAT,CAAwBE,IAAxB,EAA8B;AAC5B,MAAIC,QAAQ,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEH,cAAnF;AACA,SAAO,IAAIM,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,QAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AAEAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,YAAY;AAC1B,aAAOJ,OAAO,CAACE,MAAM,CAACG,MAAR,CAAd;AACD,KAFD;;AAIAH,IAAAA,MAAM,CAACI,OAAP,GAAiBL,MAAjB;AACAC,IAAAA,MAAM,CAACK,UAAP,CAAkBb,IAAlB,EAAwBC,QAAxB;AACD,GATM,CAAP;AAUD","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports[\"default\"] = readFileAsText;\r\n\r\n/*\r\n * read-file-as-text.js\r\n */\r\nvar INPUT_ENCODING = 'ISO-8859-1';\r\n/**\r\n * Reads a HTML5 file as text\r\n * @param {File} file\r\n */\r\n\r\nfunction readFileAsText(file) {\r\n  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : INPUT_ENCODING;\r\n  return new Promise(function (resolve, reject) {\r\n    var reader = new FileReader();\r\n\r\n    reader.onload = function () {\r\n      return resolve(reader.result);\r\n    };\r\n\r\n    reader.onerror = reject;\r\n    reader.readAsText(file, encoding);\r\n  });\r\n}"]},"metadata":{},"sourceType":"script"}